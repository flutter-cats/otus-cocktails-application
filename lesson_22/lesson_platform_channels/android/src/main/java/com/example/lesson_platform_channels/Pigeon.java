// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.lesson_platform_channels;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MultiplyResult {
    private Long result;
    public Long getResult() { return result; }
    public void setResult(Long setterArg) { this.result = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("result", result);
      return toMapResult;
    }
    static MultiplyResult fromMap(Map<String, Object> map) {
      MultiplyResult fromMapResult = new MultiplyResult();
      Object result = map.get("result");
      fromMapResult.result = (result == null) ? null : ((result instanceof Integer) ? (Integer)result : (Long)result);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class MultiplyRequest {
    private Long multiplicand;
    public Long getMultiplicand() { return multiplicand; }
    public void setMultiplicand(Long setterArg) { this.multiplicand = setterArg; }

    private Long multiplier;
    public Long getMultiplier() { return multiplier; }
    public void setMultiplier(Long setterArg) { this.multiplier = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("multiplicand", multiplicand);
      toMapResult.put("multiplier", multiplier);
      return toMapResult;
    }
    static MultiplyRequest fromMap(Map<String, Object> map) {
      MultiplyRequest fromMapResult = new MultiplyRequest();
      Object multiplicand = map.get("multiplicand");
      fromMapResult.multiplicand = (multiplicand == null) ? null : ((multiplicand instanceof Integer) ? (Integer)multiplicand : (Long)multiplicand);
      Object multiplier = map.get("multiplier");
      fromMapResult.multiplier = (multiplier == null) ? null : ((multiplier instanceof Integer) ? (Integer)multiplier : (Long)multiplier);
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface MultiplyApi {
    MultiplyResult multiply(MultiplyRequest arg);

    /** Sets up an instance of `MultiplyApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, MultiplyApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.MultiplyApi.multiply", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              MultiplyRequest input = MultiplyRequest.fromMap((Map<String, Object>)message);
              MultiplyResult output = api.multiply(input);
              wrapped.put("result", output.toMap());
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
