// Autogenerated from Pigeon (v0.2.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(NSDictionary *result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface MultiplyResult ()
+(MultiplyResult*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end
@interface MultiplyRequest ()
+(MultiplyRequest*)fromMap:(NSDictionary*)dict;
-(NSDictionary*)toMap;
@end

@implementation MultiplyResult
+(MultiplyResult*)fromMap:(NSDictionary*)dict {
  MultiplyResult* result = [[MultiplyResult alloc] init];
  result.result = dict[@"result"];
  if ((NSNull *)result.result == [NSNull null]) {
    result.result = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.result ? self.result : [NSNull null]), @"result", nil];
}
@end

@implementation MultiplyRequest
+(MultiplyRequest*)fromMap:(NSDictionary*)dict {
  MultiplyRequest* result = [[MultiplyRequest alloc] init];
  result.multiplicand = dict[@"multiplicand"];
  if ((NSNull *)result.multiplicand == [NSNull null]) {
    result.multiplicand = nil;
  }
  result.multiplier = dict[@"multiplier"];
  if ((NSNull *)result.multiplier == [NSNull null]) {
    result.multiplier = nil;
  }
  return result;
}
-(NSDictionary*)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.multiplicand ? self.multiplicand : [NSNull null]), @"multiplicand", (self.multiplier ? self.multiplier : [NSNull null]), @"multiplier", nil];
}
@end

void MultiplyApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<MultiplyApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.MultiplyApi.multiply"
        binaryMessenger:binaryMessenger];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        MultiplyRequest *input = [MultiplyRequest fromMap:message];
        FlutterError *error;
        MultiplyResult *output = [api multiply:input error:&error];
        callback(wrapResult([output toMap], error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
